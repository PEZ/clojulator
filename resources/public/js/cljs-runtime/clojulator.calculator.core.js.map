{"version":3,"sources":["clojulator/calculator/core.cljc"],"mappings":";AAOA;;;;;uCAAA,vCAAMA,sFAIHC,WAAWC;AAJd,AAKE,IAAA,AACE,IAAME,0JAAWH,vCAAWI,nCAASC,vEAAM,uEAAA,mCAAA,1GAACC,8JAASL;AAArD,AACE,AAACM,6CAAeN,QAAQE;;AAD1B,0FAAA,gDAEOA;gBAHT,GAAA,CAAAD,kBAKkBM;AALlB,QAAAN,JAK4BO;AAL5B,AAAA,0FAAA,uDAMY,AAACC,qBAAWD;;AANxB,AAAA,MAAAP","names":["clojulator.calculator.core/calculate","expression","history","e29193","result","clojulator.calculator.scanner/tokenize","clojulator.calculator.parser/parse","clojulator.calculator.evaluator/evaluate","clojulator.calculator.history/update-history","js/Error","e","cljs.core/ex-message"],"sourcesContent":["(ns clojulator.calculator.core\n  (:require\n   [clojulator.calculator.evaluator :refer [evaluate]]\n   [clojulator.calculator.history :refer [update-history]]\n   [clojulator.calculator.parser :refer [parse]]\n   [clojulator.calculator.scanner :refer [tokenize]]))\n\n(defn calculate\n  \"Given an expressions as a string, attempts to parse\n  the string and return the result. Updates the given\n  history object with the result.\"\n  [expression history]\n  (try\n    (let [result (-> expression tokenize parse (evaluate history))]\n      (update-history history result)\n      [:ok result])\n    (catch #?(:clj Exception\n              :cljs js/Error) e\n      [:error (ex-message e)])))\n"]}