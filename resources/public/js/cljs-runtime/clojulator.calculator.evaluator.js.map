{"version":3,"sources":["clojulator/calculator/evaluator.cljc"],"mappings":";AAGA,AAAA,AAEA,GAAA,QAAAA,uCAAAC,kDAAAC,4DAAAC;AAAA;AAAA,AAAA;;;2CAAA,iBAAAC,6BAAA,AAAAC,6CAAA,tIAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,kCAAA,YAEE,WAAKE,KAAKC;AAAV,AAAoB,OAACC,gBAAMF;GAF7B,4DAAAN,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAIA,AAAAM,sFAAA,mDAAA,WAA0BC,KAAKG;AAA/B,AACE,IAAMC,WAAS,AAACC,iBAAOL;AAAvB,AACE,IAAAM,WAAMF;AAAN,AAAA,QAAAE;KAAA;AACO,OAACC,oCAAMJ;;;KADd;AAEO,OAACK,oCAAML;;;KAFd;AAGO,OAACM,oCAAMN;;;;AACZ,MACgB,KAAAO,MAAW,CAAA,6EAAsCN;;;;AAEvE,AAAAL,sFAAA,yDAAA,WAA6BC,KAAKC;AAAlC,AAA4C,OAACI,iBAAOL;;AAEpD,AAAAD,sFAAA,sDAAA,WACGC,KAAKG;AADR,+FAEMH,jBACAK,9EACA,8EAAA,vEAACN,8FAASI;;AAEhB,AAAAJ,sFAAA,wDAAA,WAA4BC,KAAKG;AAAjC,AAA0C,IAAAQ,WAAiBR;IAAjBS,WAAyBG;IAAzBF,WAAkC,AAACG,eAAKhB;AAAxC,AAAA,sKAAAW,SAAAC,SAAAC,uEAAAF,SAAAC,SAAAC,zQAACC,gFAAAA,4GAAAA;;AAE3C,AAAAf,sFAAA,sDAAA,WAA2BC,KAAKG;AAAhC,AAAyC,IAAAc,WAAiBd;IAAjBe,WAAyBE;IAAzBD,WAA2B,AAACH,eAAKhB;AAAjC,AAAA,sKAAAiB,SAAAC,SAAAC,uEAAAF,SAAAC,SAAAC,zQAACL,gFAAAA,4GAAAA;;AAE1C,AAAAf,sFAAA,uDAAA,WAA4BC,KAAKG;AAAjC,AAA0C,IAAAkB,WAAiBlB;IAAjBmB,WAAAC;IAAAC,WAA2B,AAACR,eAAKhB;AAAjC,AAAA,sKAAAqB,SAAAC,SAAAE,uEAAAH,SAAAC,SAAAE,zQAACV,gFAAAA,4GAAAA;;AAE3C,AAAAf,sFAAA,yDAAA,WAA6BC,KAAKG;AAAlC,AAA2C,IAAAsB,WAAiBtB;IAAjBuB,WAAyBE;IAAzBD,WAA6B,AAACX,eAAKhB;AAAnC,AAAA,sKAAAyB,SAAAC,SAAAC,uEAAAF,SAAAC,SAAAC,zQAACb,gFAAAA,4GAAAA;;AAE5C,AAAAf,sFAAA,mDAAA,WAA2BC,KAAKG;AAAhC,AAAyC,IAAA0B,WAAiB1B;IAAjB2B,WAAyBE;IAAzBD,WAA2B,AAACf,eAAKhB;AAAjC,AAAA,sKAAA6B,SAAAC,SAAAC,uEAAAF,SAAAC,SAAAC,zQAACjB,gFAAAA,4GAAAA;;AAE1C,AAAAf,sFAAA,uDAAA,WAA4BC,KAAKG;AAAjC,AACE,IAAM8B,YAAU,AAACjB,eAAKhB;AAAtB,AACE,GAAI,6CAAA,7CAACkC,iDAAI,AAACC,gBAAMF;AACd,UAAG,AAAClC,uEAAS,AAACG,gBAAM+B,WAAW9B;;AAC/B,QAACW,gFAAAA,+GAAAA,jCAAgBX,4FAAAA,pFAAQiC,4FAAAA,hFAAEH,4FAAAA;;;AAEjC;;;;kDAAA,lDAAMnB,4GAGHX,QAAQkC,EAAEC;AAHb,wDAKO,4CAAA,WAAAC,vDAACC,xDACD,OAACC,+CAAOJ;AADR,AAAM,8EAAAE,vEAACxC,wFAAWI;GADlBmC","names":["js/clojulator","js/clojulator.calculator","js/clojulator.calculator.evaluator","js/clojulator.calculator.evaluator.evaluate","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__39554","cljs.core/MultiFn","cljs.core.symbol","clojulator.calculator.evaluator/evaluate","node","_history","cljs.core/first","history","var-name","cljs.core/second","G__39555","clojulator.calculator.history/repl1","clojulator.calculator.history/repl2","clojulator.calculator.history/repl3","js/Error","G__39557","G__39558","G__39559","clojulator.calculator.evaluator/map-eval-reduce","Math/pow","cljs.core/rest","G__39562","G__39563","G__39564","cljs.core/*","G__39572","G__39573","cljs.core//","G__39574","G__39575","G__39576","G__39577","cljs.core/mod","G__39581","G__39582","G__39583","cljs.core/+","remaining","cljs.core._EQ_","cljs.core/count","cljs.core/-","f","coll","p1__39587#","cljs.core.map","cljs.core.reduce"],"sourcesContent":["(ns clojulator.calculator.evaluator\n  (:require [clojulator.calculator.history :refer [repl1 repl2 repl3]]))\n\n(declare map-eval-reduce)\n\n(defmulti evaluate\n  \"Polymorphic evaluator for AST nodes\"\n  (fn [node _history] (first node)))\n\n(defmethod evaluate :Env [node history]\n  (let [var-name (second node)]\n    (case var-name\n      \"p1\" (repl1 history)\n      \"p2\" (repl2 history)\n      \"p3\" (repl3 history)\n      (throw #?(:clj (Exception. (str \"Unknown evnironment variable: \" var-name))\n                :cljs (js/Error. (str \"Unknown evnironment variable: \" var-name)))))))\n\n(defmethod evaluate :Number [node _history] (second node))\n\n(defmethod evaluate :Group\n  [node history]\n  (-> node\n      second\n      (evaluate history)))\n\n(defmethod evaluate :Caret [node history] (map-eval-reduce history Math/pow (rest node)))\n\n(defmethod evaluate :Star [node history] (map-eval-reduce history * (rest node)))\n\n(defmethod evaluate :Slash [node history] (map-eval-reduce history / (rest node)))\n\n(defmethod evaluate :Modulo [node history] (map-eval-reduce history mod (rest node)))\n\n(defmethod evaluate :Plus [node history] (map-eval-reduce history + (rest node)))\n\n(defmethod evaluate :Minus [node history]\n  (let [remaining (rest node)]\n    (if (= 1 (count remaining))\n      (- (evaluate (first remaining) history))\n      (map-eval-reduce history - remaining))))\n\n(defn map-eval-reduce\n  \"Helper function for mapping and reducing \n  over a collection of AST nodes.\"\n  [history f coll]\n  (->> coll\n       (map #(evaluate % history))\n       (reduce f)))\n"]}