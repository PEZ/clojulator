{"version":3,"sources":["clojulator/calculator/scanner.cljc"],"mappings":";AAGA,sDAAA,tDAAMA,oHACHC;AADH,AAEE,IAAAC,qBAAa,AAACE,gBAAMH;AAApB,AAAA,oBAAAC;AAAA,AAAA,QAAAA,JAAWC;AAAX,4DACMA,7CACA,4FAAK,AAACE,iBAAOJ,5HACb,IAAAK;AAAA,AAAA,0JAAAA,iEAAAA,nNAACC,0EAAAA,oFAAAA;;AAHP;;;AAKF,iDAAA,jDAAMC,0GAAYL;AAAlB,AACE,QAACI,0EAAAA,6EAAAA,LAAkBJ,0DAAAA;;AAErB,gDAAA,hDAAMM,wGACHN;AADH,AAEE,GAAM,gDAAA,hDAACO,qDAASP;AAAhB,AAEW,4BAAA,rBAACQ,0BAAiB,4CAAKR;;AAFlC;;;AAIF,qDAAA,rDAAMS,kHACHT;AADH,AAGW,4BAAA,rBAACQ,0BAAiB,4CAAKR;;AAElC,kDAAA,lDAAMU,4GACHZ;AADH,AAEE,OAACa,mDAAWF,mDAAeX;;AAE7B,+CAAA,/CAAMc,sGACHd;AADH,AAEE,OAACe,8CAAMC,cAAI,AAACC,mDAAWT,8CAAUR;;AAEnC,kDAAA,lDAAMkB,4GACHlB;AADH,AAEE,GAAM,6CAAA,7CAACmB,iDAAK,AAAChB,gBAAMH;AAAnB,AACE,OAACc,6CAAe,AAACM,eAAKpB;;AADxB;;;AAGF,8CAAA,9CAAMqB,oGACHrB;AADH,AAEE,IAAMsB,WAAS,AAACR,6CAAed;IACzBuB,aAAW,AAACC,gBAAMF;IAClBG,kBAAgB,wGAAKzB,xDAAM,AAAC0B,6CAAKH,7FAAYL;AAFnD,AAGE,GAAI,AAACS,uBAAOF;AACVH;;AACA,8DAAA,VAAKA,0DAAaG;;;AAExB,4CAAA,5CAAMG,gGACH5B;AADH,AAEE,IAAAC,qBAAa,AAACE,gBAAMH;AAApB,AAAA,oBAAAC;AAAA,AAAA,QAAAA,JAAWC;AAAX,AACE,oDAAKA,+CAAE,AAACE,iBAAOJ;;AADjB;;;AAGF;;;2CAAA,3CAAM6B,8FAEHC,WAAWC;AAFd,AAGE,GAAM,AAACC,cAAIF;AAAX,AACE,IAAMG,UAAQ,AAACrB,gDAAkBkB;IAC3BI,SAAO,CAAG,AAACV,gBAAMM,cAAY,AAACN,gBAAMS;IACpCE,MAAI,CAAGJ,QAAMG;AAFnB,AAGE,IAAAjC,qBAAa,AAACE,gBAAM8B;AAApB,AAAA,oBAAAhC;AAAA,AAAA,QAAAA,JAAWC;AAAX,AACE,oBACE,AAACH,oDAAgBkC;8FAAaA,1CAAQL,pDAAY,oDAAA,7CAACQ,gGAAkBD;;AADvE,oBAEE,AAAC5B,+CAAWL;AAAG,OAACkC,6CAAkBlC,EAAEiC;;AAFtC,oBAGE,AAAC3B,8CAAUN;gGAAO+B,5CAAQZ,pDAAc,oDAAA,7CAACgB,kGAAkBF;;AAH7D,AAIQ,MAEU,KAAAG,MAAW,CAAA,sEAAA,HAA4BpC,gEAAmBiC;;;;;;AAP9E;;;AAJJ;;;AAaF;;;yCAAA,zCAAMI,0FAEHC;AAFH,AAGE,IAAOxC,QAAM,AAACgC,cAAIQ;YAAlB,RACOT;aADP,TAEOU;;AAFP,AAGE,IAAAC,qBAAe,AAACb,yCAAW7B,MAAM+B;AAAjC,AAAA,oBAAAW;AAAA,YAAAA,RAASC;AAAT,AACE,IAAMC,QAAM,CAAG,CAAG,AAACC,gCAAQF,SAAO,AAACG,mCAAWH,UAAQZ;AAAtD,AACE,eACC,AAACL,6CAAKkB,MAAM5C;eACZ,CAAG+B,QAAMa;eACT,AAACG,6CAAKN,OAAOE;;;;;;AAChBF","names":["clojulator.calculator.scanner/is-repl-symbol?","chars","temp__5823__auto__","c","cljs.core/first","cljs.core/second","G__39607","clojulator.calculator.token/symbol-tokens","clojulator.calculator.scanner/is-symbol?","clojulator.calculator.scanner/is-digit?","cljs.core.not_EQ_","cljs.core/re-matches","clojulator.calculator.scanner/is-whitespace?","clojulator.calculator.scanner/ignore-whitespace","cljs.core.drop_while","clojulator.calculator.scanner/integer-lexeme","cljs.core.apply","cljs.core/str","cljs.core.take_while","clojulator.calculator.scanner/fractional-lexeme","cljs.core._EQ_","cljs.core/rest","clojulator.calculator.scanner/number-lexeme","int-part","int-length","cljs.core/count","fractional-part","cljs.core.drop","cljs.core/empty?","clojulator.calculator.scanner/repl-lexeme","clojulator.calculator.scanner/scan-token","characters","index","cljs.core/seq","trimmed","offset","pos","clojulator.calculator.token/symbol->token","clojulator.calculator.token/number->token","js/Error","clojulator.calculator.scanner/tokenize","source","tokens","temp__5821__auto__","token","delta","clojulator.calculator.token/pos","clojulator.calculator.token/length","cljs.core.conj"],"sourcesContent":["(ns clojulator.calculator.scanner\n  (:require [clojulator.calculator.token :as tok]))\n\n(defn is-repl-symbol?\n  [chars]\n  (when-let [c (first chars)]\n    (-> c\n        (str (second chars))\n        (tok/symbol-tokens))))\n\n(defn is-symbol? [c]\n  (tok/symbol-tokens c))\n\n(defn is-digit?\n  [c]\n  (when (not= nil c)\n    #?(:clj (Character/isDigit c)\n       :cljs (re-matches #\"\\d\" (str c)))))\n\n(defn is-whitespace?\n  [c]\n  #?(:clj (Character/isWhitespace c)\n     :cljs (re-matches #\"\\s\" (str c))))\n\n(defn ignore-whitespace\n  [chars]\n  (drop-while is-whitespace? chars))\n\n(defn integer-lexeme\n  [chars]\n  (apply str (take-while is-digit? chars)))\n\n(defn fractional-lexeme\n  [chars]\n  (when (= \\. (first chars))\n    (integer-lexeme (rest chars))))\n\n(defn number-lexeme\n  [chars]\n  (let [int-part (integer-lexeme chars)\n        int-length (count int-part)\n        fractional-part (->> chars (drop int-length) fractional-lexeme)]\n    (if (empty? fractional-part)\n      int-part\n      (str int-part \".\" fractional-part))))\n\n(defn repl-lexeme\n  [chars]\n  (when-let [c (first chars)]\n    (str c (second chars))))\n\n(defn scan-token\n  \"Scans for the next token in the source string ignoring whitespace.\"\n  [characters index]\n  (when (seq characters)\n    (let [trimmed (ignore-whitespace characters)\n          offset (- (count characters) (count trimmed))\n          pos (+ index offset)]\n      (when-let [c (first trimmed)]\n        (cond\n          (is-repl-symbol? trimmed) (-> trimmed repl-lexeme (tok/symbol->token pos))\n          (is-symbol? c) (tok/symbol->token c pos)\n          (is-digit? c) (-> trimmed number-lexeme (tok/number->token pos))\n          :else (throw\n                 #?(:clj (Exception. (str \"Unknown character: '\" c \"' at position \" pos))\n                    :cljs (js/Error. (str \"Unknown character: '\" c \"' at position \" pos)))))))))\n\n(defn tokenize\n  \"Given a string, returns a list of tokens.\"\n  [source]\n  (loop [chars (seq source)\n         index 0\n         tokens []]\n    (if-let [token (scan-token chars index)]\n      (let [delta (- (+ (tok/pos token) (tok/length token)) index)]\n        (recur\n         (drop delta chars)\n         (+ index delta)\n         (conj tokens token)))\n      tokens)))\n"]}