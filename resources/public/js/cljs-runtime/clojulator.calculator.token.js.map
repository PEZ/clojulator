{"version":3,"sources":["clojulator/calculator/token.cljc"],"mappings":";AAEA,4CAAA,wCAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,MAAA,yDAAA,gEAAA,iEAAA,sDAAA,mDAAA,uDAAA,uDAAA,sDAAA,uDAAA,yDAAA,5rBAAKA;AAYL,AAAA;;;oCAAA,4CAAAC,hFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,gEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,kEAAA,lEAAMD,6EAEFE,KAAKC,OAAOC,IAAIC;AAFpB,AAEyB,2FAAA,pFAACC,gEAAMJ,KAAKC,OAAOC,IAAIC;;;AAFhD,CAAA,kEAAA,lEAAML,6EAGFE,KAAKC,OAAOC,IAAIC,IAAIE;AAHxB,AAAA,kDAAA,0DAAA,+DAAA,mEAAA,uDAAA,9LAIUL,6DACEC,kEACCI,2DACJH,uDACAC;;;AART,CAAA,4DAAA,5DAAML;;AAAN,AAUA;;;+CAAA,/CAAMQ,sGAEHC,EAAEL;AAFL,AAGE,IAAMD,SAAO,4CAAKM;AAAlB,AACE,uEAAA,hEAACH,yHAAcH,OAAOC,IAAI,EAAOD,gBAAQ,AAACO,uBAAaD;;AAE3D;;;+CAAA,/CAAME,sGAEHC,EAAER;AAFL,AAGE,IAAAS,qBAAsB,CAAChB,0EAAAA,6EAAAA,LAAce,0DAAAA;AAArC,AAAA,oBAAAC;AAAA,AAAA,iBAAAA,bAAWC;AAAX,AACE,IAAMX,SAAO,4CAAKS;AAAlB,AACE,OAACN,gEAAMQ,WAAWX,OAAOC,IAAI,EAAOD;;AAFxC;;;AAIF,yCAAA,zCAAMY,0FACHC;AADH,AAEE,OAAA,mFAAOA;;AAET,qCAAA,rCAAMC,kFACHD;AADH,AAEE,OAAA,sFAASA;;AAEX,sCAAA,tCAAME,oFACHF;AADH,AAEE,OAAA,yFAAUA;;AAEZ,kCAAA,lCAAMG,4EACHH;AADH,AAEE,OAAA,iFAAMA;;AAER,qCAAA,rCAAMI,kFACHJ;AADH,AAEE,OAAA,iFAAMA","names":["clojulator.calculator.token/symbol-tokens","var_args","G__39597","clojulator.calculator.token/token","js/Error","type","lexeme","pos","len","clojulator.calculator.token.token","literal","clojulator.calculator.token/number->token","n","cljs.core/parse-double","clojulator.calculator.token/symbol->token","s","temp__5823__auto__","token-type","clojulator.calculator.token/token-type","token","clojulator.calculator.token/lexeme","clojulator.calculator.token/literal","clojulator.calculator.token/pos","clojulator.calculator.token/length"],"sourcesContent":["(ns clojulator.calculator.token)\n\n(def symbol-tokens {\\(   :OpenParen\n                    \\)   :CloseParen\n                    \\+   :Plus\n                    \\-   :Minus\n                    \\*   :Star\n                    \\/   :Slash\n                    \\^   :Caret\n                    \\%   :Modulo\n                    \"p1\" :Repl/*1\n                    \"p2\" :Repl/*2\n                    \"p3\" :Repl/*3})\n\n(defn token\n  \"Token constructor\"\n  ([type lexeme pos len] (token type lexeme pos len nil))\n  ([type lexeme pos len literal]\n   {:type type\n    :lexeme lexeme\n    :literal literal\n    :pos pos\n    :len len}))\n\n(defn number->token\n  \"Given a number and a position, return a token\"\n  [n pos]\n  (let [lexeme (str n)]\n    (token :Number lexeme pos (count lexeme) (parse-double n))))\n\n(defn symbol->token\n  \"Given a symbol and a position, return a token\"\n  [s pos]\n  (when-let [token-type (symbol-tokens s)]\n    (let [lexeme (str s)]\n      (token token-type lexeme pos (count lexeme)))))\n\n(defn token-type\n  [token]\n  (:type token))\n\n(defn lexeme\n  [token]\n  (:lexeme token))\n\n(defn literal\n  [token]\n  (:literal token))\n\n(defn pos\n  [token]\n  (:pos token))\n\n(defn length\n  [token]\n  (:len token))\n"]}